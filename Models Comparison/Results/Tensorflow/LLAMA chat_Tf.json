The pinnacle of Meta's Llama 3.1 family, this open-source language model excels in multilingual dialogue, outperforming numerous industry benchmarks for both closed and open-source conversational AI systems. Context window has been shortened to optimize for speed and cost. For longer context messages, please try Llama-3.1-405B-FW-128k. The compute points value is subject to change.View more

350per message
·
View details
OFFICIAL
Please provide a complete ready-to-run Python implementation for a U-Net architecture using Tensorflow, for binary segmentation of grayscale images. The dataset should consist of grayscale images and corresponding binary masks, which are located in the same path (the images are named with numbering like "number.png" and the masks "number_seg.png", around 5000 samples in total). It should work and provide correct predictions, and save the losses and dice scores as instructed below. The code should be structured into importable scripts with the following:

A custom Dataset class for loading the grayscale images and corresponding binary masks. (only the png files, ignore meta files or additional files in the directory)
A UNet model class definition using Tensorflow, optimized for binary segmentation (with small foreground, mostly background)
Functions for the training procedure, validation procedure, and Testing procedure.
Considerations for each part:
26. Ensure needed transforms on input image and mask pairs (Re-size images correctly, ensure gray scale and binary…)
27. Avoid overfitting and data leakage (without using augmentations), choose appropriate hyperparameters, learning rate, batch size, etc

• For Training and Validation:

Compute training and validation losses.
Track and save the average training loss for each epoch in a separate Excel file (train_losses.xlsx) in a given save path. The first row should contain the epoch numbers, and the second row should contain the corresponding average training loss for each epoch.
Similarly, save the validation loss for each epoch in an Excel file (val_losses.xlsx) with the same structure.
At the end of training, save both the entire model and the model's state dictionary (.pth files) in the save path
Calculate total training time from start to end, and print at the end of training
The progress, phase (train/validation), and all info should be shown epoch by epoch using tqdm progress bars during training, validation, and testing.
A function to visualize training losses and validation losses over epochs afterwards, on the same plot. Save plot in a specified save path as png.
During Validation: Dice scores should be calculated for each batch, and all dice coefficients for the entire epoch should be stored in an Excel file, where each row in the Excel file should represent an epoch, and each column should represent a batch. The Excel file (named “validation_dice_scores” should be saved at the specified save path after validation is done.
Do the same for the Testing and store dice the Dice scores the same way and save the excel file as “test_dice_scores” after testing is done.
• For Testing:

A function to visualize the predicted masks, the input image, and the ground truth, for 5 random samples, after testing is done. (subplots for 5 random samples in one plot, in 5 rows and 3 columns (title at top: Input Image, Ground Truth, Prediction). Also display image file name /id string above each image and mask. save the plot as .png).
• For Main:

Shuffle the data, split the dataset into: 80% training, 10% validation, and 10% test sets using train_test_split. Print the sizes of each (how many images), and copy the splitted data (images and their respective masks)
DataLoader setup for training, validation, and testing sets.
Ensure correct data loading, print data loader sizes.
Also print model summary, and total number of model parameters (n learnable params)
All the above functionalities should be implemented in a modular way so that they can be imported as scripts or classes.
All visualizations should just be saved as png. No need to display the plots during running.
Ensure that everything can be executed in an if __name__ == "__main__": block with instructions for loading the dataset, configuring hyperparameters, and saving the trained model.
The directory structure should only be:
unet_segmentation/
├── dataset.py
├── model.py
├── train.py
├── main.py

Llama-3.1-405B

Poe
Here is the implementation of the U-Net architecture for binary segmentation of grayscale images using TensorFlow:

dataset.py

python

Copy
import os
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array

class Dataset:
    def __init__(self, data_dir, img_size):
        self.data_dir = data_dir
        self.img_size = img_size
        self.img_paths = []
        self.mask_paths = []
        self.load_data()

    def load_data(self):
        for file in os.listdir(self.data_dir):
            if file.endswith('.png') and not file.endswith('_seg.png'):
                img_path = os.path.join(self.data_dir, file)
                mask_path = os.path.join(self.data_dir, file.replace('.png', '_seg.png'))
                self.img_paths.append(img_path)
                self.mask_paths.append(mask_path)

    def __len__(self):
        return len(self.img_paths)

    def __getitem__(self, idx):
        img_path = self.img_paths[idx]
        mask_path = self.mask_paths[idx]
        img = load_img(img_path, grayscale=True, target_size=self.img_size)
        mask = load_img(mask_path, grayscale=True, target_size=self.img_size)
        img = img_to_array(img) / 255.0
        mask = img_to_array(mask) / 255.0
        return img, mask
model.py

python

Copy
import tensorflow as tf
from tensorflow.keras.layers import Conv2D, MaxPooling2D, UpSampling2D, Concatenate

class UNet:
    def __init__(self, input_shape):
        self.input_shape = input_shape
        self.model = self.build_model()

    def build_model(self):
        inputs = tf.keras.Input(shape=self.input_shape)
        conv1 = Conv2D(32, 3, activation='relu', padding='same')(inputs)
        conv1 = Conv2D(32, 3, activation='relu', padding='same')(conv1)
        pool1 = MaxPooling2D(pool_size=(2, 2))(conv1)

        conv2 = Conv2D(64, 3, activation='relu', padding='same')(pool1)
        conv2 = Conv2D(64, 3, activation='relu', padding='same')(conv2)
        pool2 = MaxPooling2D(pool_size=(2, 2))(conv2)

        conv3 = Conv2D(128, 3, activation='relu', padding='same')(pool2)
        conv3 = Conv2D(128, 3, activation='relu', padding='same')(conv3)
        pool3 = MaxPooling2D(pool_size=(2, 2))(conv3)

        conv4 = Conv2D(256, 3, activation='relu', padding='same')(pool3)
        conv4 = Conv2D(256, 3, activation='relu', padding='same')(conv4)
        pool4 = MaxPooling2D(pool_size=(2, 2))(conv4)

        conv5 = Conv2D(512, 3, activation='relu', padding='same')(pool4)
        conv5 = Conv2D(512, 3, activation='relu', padding='same')(conv5)

        up6 = UpSampling2D(size=(2, 2))(conv5)
        merge6 = Concatenate()([conv4, up6])
        conv6 = Conv2D(256, 3, activation='relu', padding='same')(merge6)
        conv6 = Conv2D(256, 3, activation='relu', padding='same')(conv6)

        up7 = UpSampling2D(size=(2, 2))(conv6)
        merge7 = Concatenate()([conv3, up7])
        conv7 = Conv2D(128, 3, activation='relu', padding='same')(merge7)
        conv7 = Conv2D(128, 3, activation='relu', padding='same')(conv7)

        up8 = UpSampling2D(size=(2, 2))(conv7)
        merge8 = Concatenate()([conv2, up8])
        conv8 = Conv2D(64, 3, activation='relu', padding='same')(merge8)
        conv8 = Conv2D(64, 3, activation='relu', padding='same')(conv8)

        up9 = UpSampling2D(size=(2, 2))(conv8)
        merge9 = Concatenate()([conv1, up9])
        conv9 = Conv2D(32, 3, activation='relu', padding='same')(merge9)
        conv9 = Conv2D(32, 3, activation='relu', padding='same')(conv9)

        outputs = Conv2D(1, 1, activation='sigmoid')(conv9)
        model = tf.keras.Model(inputs=[inputs], outputs=[outputs])
        return model
train.py

python

Copy
import tensorflow as tf
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping
from sklearn.model_selection import train_test_split
from dataset import Dataset
from model import UNet
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tqdm import tqdm

def train(model, train_loader, val_loader, epochs, save_path):
    train_losses = []
    val_losses = []
    train_dice_scores = []
    val_dice_scores = []

    optimizer = Adam(lr=1e-4)
    loss_fn = tf.keras.losses.BinaryCrossentropy()

    for epoch in range(epochs):
        train_loss = 0
        val_loss = 0
        train_dice_score = 0
        val_dice_score = 0

        with tqdm(train_loader, desc=f'Epoch {epoch+1}/{epochs}') as pbar:
            for img, mask in pbar:
                with tf.GradientTape() as tape:
                    outputs = model(img, training=True)
                    loss = loss_fn(mask, outputs)
                gradients = tape.gradient(loss, model.trainable_variables)
                optimizer.apply_gradients(zip(gradients, model.trainable_variables))
                train_loss += loss.numpy()
                train_dice_score += dice_score(mask, outputs)

        train_loss /= len(train_loader)
        train_dice_score /= len(train_loader)

        with tqdm(val_loader, desc=f'Validation {epoch+1}/{epochs}') as pbar:
            for img, mask in pbar:
                outputs = model(img, training=False)
                loss = loss_fn(mask, outputs)
                val_loss += loss.numpy()
                val_dice_score += dice_score(mask, outputs)

        val_loss /= len(val_loader)
        val_dice_score /= len(val_loader)

        train_losses.append(train_loss)
        val_losses.append(val_loss)
        train_dice_scores.append(train_dice_score)
        val_dice_scores.append(val_dice_score)

        print(f'Epoch {epoch+1}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, Train Dice Score: {train_dice_score:.4f}, Val Dice Score: {val_dice_score:.4f}')

        pd.DataFrame({'Epoch': range(1, epoch+2), 'Train Loss': train_losses, 'Val Loss': val_losses}).to_excel(f'{save_path}/train_losses.xlsx', index=False)
        pd.DataFrame({'Epoch': range(1, epoch+2), 'Train Dice Score': train_dice_scores, 'Val Dice Score': val_dice_scores}).to_excel(f'{save_path}/val_dice_scores.xlsx', index=False)

        model.save(f'{save_path}/model.pth')
        model.save_weights(f'{save_path}/model_weights.pth')

def dice_score(mask, outputs):
    intersection = tf.reduce_sum(mask * outputs)
    union = tf.reduce_sum(mask) + tf.reduce_sum(outputs)
    return 2 * intersection / union

def visualize_train_losses(save_path):
    train_losses = pd.read_excel(f'{save_path}/train_losses.xlsx')
    plt.plot(train_losses['Epoch'], train_losses['Train Loss'], label='Train Loss')
    plt.plot(train_losses['Epoch'], train_losses['Val Loss'], label='Val Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()
    plt.savefig(f'{save_path}/train_losses.png')

def visualize_val_dice_scores(save_path):
    val_dice_scores = pd.read_excel(f'{save_path}/val_dice_scores.xlsx')
    plt.plot(val_dice_scores['Epoch'], val_dice_scores['Train Dice Score'], label='Train Dice Score')
    plt.plot(val_dice_scores['Epoch'], val_dice_scores['Val Dice Score'], label='Val Dice Score')
    plt.xlabel('Epoch')
    plt.ylabel('Dice Score')
    plt.legend()
    plt.savefig(f'{save_path}/val_dice_scores.png')

def visualize_test_predictions(test_loader, model, save_path):
    test_dice_scores = []
    for img, mask in test_loader:
        outputs = model(img, training=False)
        test_dice_scores.append(dice_score(mask, outputs))
    pd.DataFrame({'Test Dice Score': test_dice_scores}).to_excel(f'{save_path}/test_dice_scores.xlsx', index=False)

    fig, axes = plt.subplots(5, 3, figsize=(15, 15))
    for i in range(5):
        img, mask = next(iter(test_loader))
        outputs = model(img, training=False)
        axes[i, 0].imshow(img[0, :, :, 0], cmap='gray')
        axes[i, 0].set_title('Input Image')
        axes[i, 1].imshow(mask[0, :, :, 0], cmap='gray')
        axes[i, 1].set_title('Ground Truth')
        axes[i, 2].imshow(outputs[0, :, :, 0], cmap='gray')
        axes[i, 2].set_title('Prediction')
    plt.savefig(f'{save_path}/test_predictions.png')
main.py

python

Copy
import os
import numpy as np
from dataset import Dataset
from model import UNet
from train import train, visualize_train_losses, visualize_val_dice_scores, visualize_test_predictions
from sklearn.model_selection import train_test_split

if __name__ == '__main__':
    data_dir = 'path/to/data'
    save_path = 'path/to/save'
    img_size = (256, 256)
    batch_size = 32
    epochs = 50

    dataset = Dataset(data_dir, img_size)
    train_idx, val_idx, test_idx = train_test_split(range(len(dataset)), test_size=0.2, random_state=42)
    train_dataset = dataset[train_idx]
    val_dataset = dataset[val_idx]
    test_dataset = dataset[test_idx]

    train_loader = tf.data.Dataset.from_tensor_slices(train_dataset).batch(batch_size)
    val_loader = tf.data.Dataset.from_tensor_slices(val_dataset).batch(batch_size)
    test_loader = tf.data.Dataset.from_tensor_slices(test_dataset).batch(batch_size)

    model = UNet(input_shape=(img_size[0], img_size[1], 1))
    model.summary()
    print(f'Total number of model parameters: {model.count_params()}')

    train(model, train_loader, val_loader, epochs, save_path)
    visualize_train_losses(save_path)
    visualize_val_dice_scores(save_path)
    visualize_test_predictions(test_loader, model, save_path)
Note that you need to replace 'path/to/data' and 'path/to/save' with the actual paths to your data directory and save directory, respectively. Also, make sure to adjust the hyperparameters (e.g., batch_size, epochs) according to your specific needs.